number_1="NUMBER(1)"
char_36="CHAR(36)"
tinyint_1= "TINYINT(1)"

mysql_to_mssql_mapping = {
    "INT": "INT",
    "BIGINT": "BIGINT",
    "SMALLINT": "SMALLINT",
    "TINYINT": "TINYINT",
    "MEDIUMINT": "INT",
    "DECIMAL": lambda size, precision, scale: f"DECIMAL({precision}, {scale})",
    "NUMERIC": lambda size, precision, scale: f"NUMERIC({precision}, {scale})",
    "FLOAT": lambda size, precision, scale: f"FLOAT({precision})",
    "REAL": "REAL",
    "DOUBLE": "FLOAT",
    "CHAR": lambda size, precision, scale: f"CHAR({size})",
    "VARCHAR": lambda size, precision, scale: f"VARCHAR({size})",
    "NCHAR": lambda size, precision, scale: f"NCHAR({size})",
    "NVARCHAR": lambda size, precision, scale: f"NVARCHAR({size})",
    "NTEXT": lambda size, precision, scale: f"NTEXT({size})",
    "BINARY": lambda size, precision, scale: f"BINARY({size})" if size is not None else "BINARY",
    "VARBINARY": lambda size, precision, scale: f"VARBINARY({size})" if size is not None else "VARBINARY",
    "BLOB": "VARBINARY",
    "UUID": char_36,
    "XML": "LONGTEXT",
   tinyint_1: "BIT",
    "TIMESTAMP": "DATETIME",
    "DATETIME": "DATETIME",
    "DATE": "DATE",
    "TIME": "TIME",
    "TEXT": "VARCHAR(MAX)",
    "BOOLEAN": "BIT",
}

mysql_to_postgres_mapping = {
    "TINYINT": "SMALLINT",
    "SMALLINT": "INTEGER",
    "INT": "BIGINT",
    "NUMERIC": lambda size, precision,
                      scale: f"NUMERIC({precision}, {scale})" if precision is not None and scale is not None else "NUMERIC",
    "DECIMAL": lambda size, precision,
                      scale: f"NUMERIC({precision}, {scale})" if precision is not None and scale is not None else "NUMERIC",
    "BIGINT": lambda size, precision, scale: f"NUMERIC({precision}, {scale})",
    "FLOAT": "REAL",
    "DATE": "DATE",
    "TIME": "TIME",
    "DATETIME": "TIMESTAMP",
    "TIMESTAMP": "TIMESTAMP",
    "CHAR": lambda size, precision, scale: f"CHAR({size})",
    "VARCHAR": lambda size, precision, scale: f"VARCHAR({size})",
    "NCHAR": lambda size, precision, scale: f"CHAR({size})",
    "NVARCHAR": lambda size, precision, scale: f"VARCHAR({size})",
    "NTEXT": "TEXT",
    "TEXT": "TEXT",
    "VARBINARY": "BYTEA",
    "BINARY": "BYTEA",
    "BLOB": "BYTEA",
    "BIT": lambda size, precision, scale: f"NUMERIC({precision}, {scale})",
    "INTEGER": "INTEGER",
    "BOOLEAN": "BOOLEAN",
   tinyint_1: "BOOLEAN",
    "UUID": char_36,
    "XML": "TEXT",
    "DOUBLE": "FLOAT",
    "JSON": "JSONB",
    "LONGTEXT": "TEXT",
    "MEDIUMTEXT": "TEXT",
    "TINYTEXT": lambda size, precision, scale: f"VARCHAR({size})",
    "MEDIUMINT": "TEXT",
    "LONGBLOB": "BYTEA",
    "MEDIUMBLOB": "BYTEA",
    "TINYBLOB": "BYTEA",
}

mysql_to_db2_mapping = {
    "TINYINT": "SMALLINT",
    "SMALLINT": "SMALLINT",
    "INT": "INTEGER",
    "BIGINT": "BIGINT",
    "MEDIUMINT": "INTEGER",
    "NUMERIC": lambda size, precision, scale: f"NUMERIC({precision},{scale})",
    "DECIMAL": lambda size, precision, scale: f"DECIMAL({precision},{scale})",
    "FLOAT": "REAL",
    "REAL": "REAL",
    "DATE": "DATE",
    "TIME": "TIME",
    "DATETIME": "TIMESTAMP",
    "TIMESTAMP": "TIMESTAMP",
    "CHAR": lambda size, precision, scale: f"CHAR({size})" if size is not None else "CHAR",
    "VARCHAR": lambda size, precision, scale: f"VARCHAR({size})" if size is not None else "VARCHAR",
    "NCHAR": lambda size, precision, scale: f"CHARACTER FOR BIT DATA({size})",
    "NVARCHAR": lambda size, precision, scale: f"VARCHAR FOR BIT DATA({size})",
    "NTEXT": "CLOB",
    "TEXT": "CLOB",
    "BINARY": lambda size, precision, scale: f"BINARY({size})" if size is not None else "CHAR FOR BIT DATA",
    "VARBINARY": lambda size, precision, scale: f"VARBINARY({size})" if size is not None else "VARCHAR FOR BIT DATA",
    "BOOLEAN": "SMALLINT",
    "XML": "TEXT",
    "UUID": char_36,
   tinyint_1: "SMALLINT",
    "DOUBLE": "DOUBLE",
    "BLOB": "BLOB",
}

mysql_to_oracle_mapping = {

    "TINYINT": lambda size, precision,
                      scale: f"NUMBER({precision},{scale})" if precision is not None and scale is not None else "NUMBER",
    "MEDIUMINT": lambda size, precision,
                        scale: f"NUMBER({precision},{scale})" if precision is not None and scale is not None else "NUMBER",
    "SMALLINT": lambda size, precision,
                       scale: f"NUMBER({precision},{scale})" if precision is not None and scale is not None else "NUMBER",
    "BIGINT": lambda size, precision,
                     scale: f"NUMBER({precision},{scale})" if precision is not None and scale is not None else "NUMBER",
    "DECIMAL": lambda size, precision,
                      scale: f"NUMBER({precision},{scale})" if precision is not None and scale is not None else "NUMBER",
    "NUMERIC": lambda size, precision,
                      scale: f"NUMBER({precision},{scale})" if precision is not None and scale is not None else "NUMBER",
    "FLOAT": "FLOAT",
    "REAL": lambda size, precision, scale: f"FLOAT({precision})" if precision is not None else "FLOAT",
    "DATE": "DATE",
    "DATETIME": "TIMESTAMP",
    "INTEGER": lambda size, precision,
                      scale: f"NUMBER({precision},{scale})" if precision is not None and scale is not None else "NUMBER",
    "INT": lambda size, precision,
                  scale: f"NUMBER({precision},{scale})" if precision is not None and scale is not None else "NUMBER",
    "TIMESTAMP": "TIMESTAMP",
    "TIME": "TIMESTAMP",
    "CHAR": lambda size, precision, scale: f"CHAR({size})" if size is not None else "CHAR",
    "VARCHAR": lambda size, precision, scale: f"VARCHAR2({size})" if size is not None else "VARCHAR2",
    "DOUBLE": lambda size, precision, scale: f"FLOAT({precision})" if precision is not None else "FLOAT",
    "TEXT": "CLOB",
    "BOOLEAN": number_1,
    "BOOL": number_1,
    tinyint_1: number_1,
    "VARBINARY": lambda size, precision, scale: f"RAW({size})" if size is not None else "RAW",
    "BINARY": lambda size, precision, scale: f"RAW({size})" if size is not None else "RAW",
    "NVARCHAR": lambda size, precision, scale: f"NVARCHAR2({size})" if size is not None else "NVARCHAR2",
    "NCHAR": lambda size, precision, scale: f"NCHAR({size})",
    "NTEXT": "NCLOB",
    "LONGTEXT": "NCLOB",
    "XML": "XMLTYPE",
    "UUID": lambda size, precision, scale: f"RAW({size})" if size is not None else "RAW",
    "BIT": "RAW",
    "BLOB": "BLOB",
    "ENUM": lambda size, precision, scale: f"VARCHAR2({size})" if size is not None else "VARCHAR2",
    "LONGBLOB": "BLOB",
    "MEDIUMTEXT": "CLOB",
    "SET": lambda size, precision, scale: f"VARCHAR2({size})" if size is not None else "VARCHAR2",
    "TINYBLOB": "RAW",
    "TINYTEXT": "VARCHAR2",
    "YEAR": "NUMBER",
}
